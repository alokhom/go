---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-redis-config
  namespace: tyk
data:
  maxmemory : 2mb
# ---
# # Redis Insight service with name 'redisinsight-service'
# apiVersion: v1
# kind: Service
# metadata:
#   name: redis       # name should not be 'redisinsight'
#   namespace: tyk
# # since the service creates
# # environment variables that
# # conflicts with redisinsight
# # application's environment
# # variables `RI_APP_HOST` and
# # `RI_APP_PORT`
# spec:
#   type: ClusterIP
#   ports:
#     - port: 6379
#       targetPort: 6379
#   selector:
#     app: redis
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: redis
#   namespace: tyk
#   labels:
#     app: redis
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: redis
#   template:
#     metadata:
#       labels:
#        app: redis
#     spec:
#       containers:
#       - env:
#         - name: REDIS_PASSWORD
#           value: "redispassword"  # Set a strong password for Redis
#         name: redis-container
#         image: redis:7.2.9-alpine
#         ports:
#           - containerPort: 6379
#         resources:
#           requests:
#             cpu: "1m"
#         volumeMounts:
#           - name: data
#             mountPath: /redis-master-data
#           - name: redis-config
#             mountPath: /redis-master
#       volumes:
#       - name: redis-config
#         configMap:
#            name: my-redis-config
#       - name: data
#         emptyDir: {}
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: redis
#   namespace: tyk
#   labels:
#     app: redis
# spec:
#   ports:
#   - name: redis
#     port: 6379
#     targetPort: redis
#   selector:
#     app: redis
#     # role: master
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: redis-config
#   namespace: tyk  # Specify the namespace
# data:
#   redis.conf: |
#     bind 0.0.0.0
#     protected-mode no
#     appendonly yes
# ---
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: redis
#   namespace: tyk  # Specify the namespace
# spec:
#   serviceName: "redis"
#   replicas: 1
#   selector:
#     matchLabels:
#       app: redis
#   template:
#     metadata:
#       labels:
#         app: redis
#     spec:
#       containers:
#       - name: redis
#         image: redis:7
#         command: ["redis-server", "/etc/redis/redis.conf"]
#         volumeMounts:
#         - name: redis-config
#           mountPath: /etc/redis
#         ports:
#         - name: redis
#           containerPort: 6379
#       volumes:
#       - name: redis-config
#         configMap:
#           name: redis-config
---
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: redis
#   namespace: tyk
# data:
#   master.conf: |
#     bind 0.0.0.0
#     requirepass cluster1234
#     port 6379
#     tcp-backlog 511
#     timeout 0
#     tcp-keepalive 300
#     daemonize no
#     supervised no
#     pidfile /var/run/redis_6379.pid
#     loglevel notice
#     logfile ""
#     maxmemory 2mb
#     appendonly yes
#     appendfilename redis.aof 
#   slave.conf: |
#     slaveof 10-108-0-102.redis 6379
#     maxmemory 2mb
#     masterauth cluster1234
# # ---
# # apiVersion: v1
# # kind: ConfigMap
# # metadata:
# #   name: conf
# #   namespace: tyk
# #   labels:
# #     app: redis-cluster
# # data:
# #   redis.conf: |+
# #     cluster-enabled yes
# #     cluster-require-full-coverage no
# #     cluster-node-timeout 15000
# #     cluster-config-file /data/nodes.conf
# #     cluster-migration-barrier 1
# #     appendonly yes
# #     protected-mode no
# #     maxmemory 2mb
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: redis-cluster-1
#   namespace: tyk
#   labels:
#     app: redis-cluster
#     role: master
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: redis-cluster
#       role: master
#   template:
#     metadata:
#       labels:
#         app: redis-cluster
#         role: master
#     spec:
#       containers:
#       - name: redis
#         image: redis:7.2.1
#         command:
#         - bash
#         - "-c"
#         - |
#           set -ex
#           cp /mnt/config-map/master.conf /etc/redis.conf
#           redis-server /etc/redis.conf
#         env:
#         - name: REDIS_PASSWORD
#           value: "redispassword"
#         - name: POD_IP
#           valueFrom:
#             fieldRef:
#               fieldPath: status.podIP
#         ports:
#         - name: redis
#           containerPort: 6379
#         volumeMounts:
#         - name: data
#           mountPath: /data
#         - name: conf
#           mountPath: /etc/
#           subPath: redis.conf
#         - name: config-map
#           mountPath: /mnt/config-map
#         readinessProbe:
#           exec:
#             command:
#             - sh
#             - -c
#             - "redis-cli -h $(hostname) ping"
#           initialDelaySeconds: 15
#           timeoutSeconds: 5
#         livenessProbe:
#           exec:
#             command:
#             - sh
#             - -c
#             - "redis-cli -h $(hostname) ping"
#           initialDelaySeconds: 20
#           periodSeconds: 3
#       volumes:
#       - name: config-map
#         configMap:
#           name: redis
#           defaultMode: 0755
#       - name: conf
#         emptyDir: {}
#       - name: data
#         persistentVolumeClaim:
#           claimName: data
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: data
#   namespace: tyk
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 100Mi
#   storageClassName: do-block-storage
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: redis-cluster-2
#   namespace: tyk
#   labels:
#     app: redis-cluster
#     role: slave
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: redis-cluster
#       role: slave
#   template:
#     metadata:
#       labels:
#         app: redis-cluster
#         role: slave
#     spec:
#       containers:
#       - name: redis
#         image: redis:7.2.1
#         command:
#         - bash
#         - "-c"
#         - |
#           set -ex
#           cp /mnt/config-map/slave.conf /etc/redis.conf
#           redis-server /etc/redis.conf
#         env:
#         - name: REDIS_PASSWORD
#           value: "redispassword"
#         - name: POD_IP
#           valueFrom:
#             fieldRef:
#               fieldPath: status.podIP
#         ports:
#         - name: redis
#           containerPort: 6379
#         volumeMounts:
#         - name: data-slave
#           mountPath: /data
#         - name: conf
#           mountPath: /etc/
#           subPath: redis.conf
#         - name: config-map
#           mountPath: /mnt/config-map
#         readinessProbe:
#           exec:
#             command:
#             - sh
#             - -c
#             - "redis-cli -h $(hostname) ping"
#           initialDelaySeconds: 15
#           timeoutSeconds: 5
#         livenessProbe:
#           exec:
#             command:
#             - sh
#             - -c
#             - "redis-cli -h $(hostname) ping"
#           initialDelaySeconds: 20
#           periodSeconds: 3
#       volumes:
#       - name: config-map
#         configMap:
#           name: redis
#           defaultMode: 0755
#       - name: conf
#         emptyDir: {}
#       - name: data-slave
#         persistentVolumeClaim:
#           claimName: data-slave
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: data-slave
#   namespace: tyk
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 100Mi
#   storageClassName: do-block-storage
---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: groundhog2k
  namespace: tyk
spec:
  interval: 24h
  url: https://groundhog2k.github.io/helm-charts/
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: redis
  namespace: tyk
spec:
  interval: 30m
  chart:
    spec:
      chart: redis
      version: "*"
      sourceRef:
        kind: HelmRepository
        name: groundhog2k
        namespace: tyk
      interval: 12h
  values:
    ## Default values for Redis deployment

    ## Redis docker image
    image:
      registry: "docker.io"
      repository: "redis"
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: ""

    ## Pull secrets and name override options
    imagePullSecrets: []
    nameOverride: ""
    fullnameOverride: ""

    ## Additional labels for Deployment or StatefulSet
    customLabels: {}

    ## Additional annotations for Deployment or StatefulSet
    customAnnotations: {}

    ## Optional service account
    serviceAccount:
      # Specifies whether a service account should be created
      create: false
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""

    ## Additional pod annotations
    podAnnotations: {}

    ## Additional pod labels
    podLabels: {}

    ## Pod management policy
    podManagementPolicy: OrderedReady

    ## Pod update strategy
    updateStrategyType: RollingUpdate

    ## Pod security options
    podSecurityContext:
      fsGroup: 999
      supplementalGroups:
        - 999

    ## Default security options to run Redis as non-root, read only container without privilege escalation
    securityContext:
      allowPrivilegeEscalation: false
      privileged: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 999
      runAsGroup: 999
      capabilities:
        drop:
          - ALL

    ## Prometheus metrics and service monitor configuration
    metrics:
      ## Enable metrics export
      enabled: false
      ## Metrics exporter configuration
      exporter:
        ## Redis exporter image
        image:
          registry: "docker.io"
          repository: "oliver006/redis_exporter"
          pullPolicy: IfNotPresent
          tag: "v1.70.0"
        ## Default security options to run Exporter as non-root, read only container without privilege escalation
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
              - ALL
        ## Resource limits and requests
        resources: {}
          # limits:
          #   cpu: 100m
          #   memory: 128Mi
          # requests:
          #   cpu: 100m
          #   memory: 128Mi

        ## Custom startup probe (overwrites default startup probe)
        customStartupProbe: {}

        ## Default startup probe
        startupProbe:
          enabled: true
          initialDelaySeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
          successThreshold: 1
          periodSeconds: 10

        ## Custom liveness probe (overwrites default liveness probe)
        customLivenessProbe: {}

        ## Default liveness probe
        livenessProbe:
          enabled: true
          initialDelaySeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
          periodSeconds: 10

        ## Custom readiness probe (overwrites default readiness probe)
        customReadinessProbe: {}

        ## Default readiness probe
        readinessProbe:
          enabled: true
          initialDelaySeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
          periodSeconds: 10

        ## Arguments for the container entrypoint process (exporter only)
        args: []
        ## Additional environment variables (exporter only)
        env: []
        ## A list of existing secrets that will be mounted into the exporter container as environment variables (see: https://github.com/oliver006/redis_exporter#command-line-flags)
        extraExporterEnvSecrets: []
        ## A list of additional existing secrets that will be mounted into the exporter container
        ## The mounted files of the secrets can be used for custom configuration options (see: https://github.com/oliver006/redis_exporter#command-line-flags)
        extraExporterSecrets: []
            ## Name of the existing K8s secret
        #  - name:
            ## Mount default mode (0440 if parameter is omitted)
        #    defaultMode: 0440
            ## Mount path where the secret should be mounted into the container (f.e. /mysecretfolder)
        #    mountPath:
        ## A list of additional existing configMaps that will be mounted into the exporter container
        extraExporterConfigs: []
            ## Name of the existing K8s configMap
        #  - name:
            ## Mount default mode (0440 if parameter is omitted)
        #    defaultMode: 0440
            ## Mount path where the configMap should be mounted into the container (f.e. /mysecretfolder)
        #    mountPath:

      ## Exporter service configuration
      service:
        ## Enable metrics service
        enabled: true
        ## Type of service (not available when haMode is enabled)
        type: ClusterIP
        ## Redis exporter service port
        servicePort: 9121
        ## Redis exporter container port
        containerPort: 9121
        ## The node port (only relevant for type LoadBalancer or NodePort - not available when haMode is enabled)
        nodePort:
        ## The cluster ip address (only relevant for type LoadBalancer or NodePort)
        clusterIP:
        ## The loadbalancer ip address (only relevant for type LoadBalancer - not available when haMode is enabled)
        loadBalancerIP:
        # Annotations to add to the service
        annotations: {}
        # Labels to add to the service
        labels: {}

      ## Prometheus service monitor configuration
      serviceMonitor:
        ## Enable service monitor
        enabled: true
        ## Additional labels for the service monitor object
        additionalLabels: {}
        ## Annotations for the service monitor object
        annotations: {}
        ## The scrape interval for prometheus
        # interval:
        ## The scrape timeout value
        # scrapeTimeout:
        ## Extra parameters rendered to the service monitor endpoint
        extraEndpointParameters: {}
        ## Extra parameters rendered to the service monitor
        extraParameters: {}
        ## Path to metrics
        path: "/metrics"
        ## Scheme to use for metrics endpoint
        scheme: http

    ## Default redis service port (default Redis server port 6379, defaul Redis sentinel port 26379)
    service:
      ## Type of service (not available when haMode is enabled)
      type: ClusterIP
      ## Redis server port
      serverPort: 6379
      ## Redis sentinel mode (only when haMode is enabled)
      sentinelPort: 26379
      ## The node port (only relevant for type LoadBalancer or NodePort - not available when haMode is enabled)
      nodePort:
      ## The cluster ip address (only relevant for type LoadBalancer or NodePort)
      clusterIP:
      ## The loadbalancer ip address (only relevant for type LoadBalancer - not available when haMode is enabled)
      loadBalancerIP:
      # Annotations to add to the service
      annotations: {}
      # Labels to add to the service
      labels: {}

    ## Resources of the default init container
    initResources: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    ## Resource limits and requests (for Redis)
    resources: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    ## Resource limits and requests (for Redis Sentinel - only when haMode is enabled)
    sentinelResources: {}
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    ## Additional node selector
    nodeSelector: {}

    ## Tolerations for pod assignment
    tolerations: []

    ## Affinity for pod assignment
    affinity: {}

    ## Topology spread constraints for pods
    topologySpreadConstraints: {}

    ## Maximum number of revisions maintained in revision history
    revisionHistoryLimit:

    ## Pod disruption budget
    podDisruptionBudget: {}
      ## Minimum number of pods that must be available after eviction
      # minAvailable:
      ## Maximum number of pods that can be unavailable after eviction
      # maxUnavailable:

    ## Custom startup probe (overwrites default startup probe)
    customStartupProbe: {}

    ## Default startup probe
    startupProbe:
      enabled: true
      initialDelaySeconds: 10
      timeoutSeconds: 5
      failureThreshold: 30
      successThreshold: 1
      periodSeconds: 10

    ## Custom liveness probe (overwrites default liveness probe)
    customLivenessProbe: {}

    ## Default liveness probe
    livenessProbe:
      enabled: true
      initialDelaySeconds: 15
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
      periodSeconds: 10

    ## Custom readiness probe (overwrites default readiness probe)
    customReadinessProbe: {}

    ## Default readiness probe
    readinessProbe:
      enabled: true
      initialDelaySeconds: 15
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1
      periodSeconds: 10

    ## Additional environment variables (Redis server and Sentinel)
    env: []

    ## Extra init containers
    extraInitContainers: []

    ## Extra containers for usage as sidecars
    extraContainers: []

    ## Default Kubernetes cluster domain
    clusterDomain: cluster.local

    ## Arguments for the container entrypoint process (Redis server)
    args: []

    ## A list of existing secrets that will be mounted into the redis container as environment variables
    extraRedisEnvSecrets: []

    ## Additional redis.conf
    redisConfig: |

    ## An existing secret with files that will be added to the redis.conf
    extraSecretRedisConfigs:

    ## A list of additional existing secrets that will be mounted into the redis container
    ## The mounted files of the secrets can be used for custom configuration options (see: redisConfig, extraSecretRedisConfigs)
    extraRedisSecrets: []
        ## Name of the existing K8s secret
    #  - name:
        ## Mount default mode (0440 if parameter is omitted)
    #    defaultMode: 0440
        ## Mount path where the secret should be mounted into the container (f.e. /mysecretfolder)
    #    mountPath:

    ## A list of additional existing configMaps that will be mounted into the container
    extraRedisConfigs: []
        ## Name of the existing K8s configMap
    #  - name:
        ## Mount default mode (0440 if parameter is omitted)
    #    defaultMode: 0440
        ## Mount path where the configMap should be mounted into the container (f.e. /mysecretfolder)
    #    mountPath:

    ## Arguments for the container entrypoint process (Sentinel)
    sentinelArgs: []

    ## A list of existing secrets that will be mounted into the sentinel container as environment variables
    extraSentinelEnvSecrets: []

    ## Additional sentinel.conf (only when haMode is enabled)
    sentinelConfig: |

    ## An existing secret with files that will be added to the sentinel.conf
    extraSecretSentinelConfigs:

    ## A list of additional existing secrets that will be mounted into the sentinel container
    ## The mounted files of the secrets can be used for custom configuration options (see: sentinelConfig, extraSecretSentinelConfigs)
    extraSentinelSecrets: []
        ## Name of the existing K8s secret
    #  - name:
        ## Mount default mode (0440 if parameter is omitted)
    #    defaultMode: 0440
        ## Mount path where the secret should be mounted into the container (f.e. /mysecretfolder)
    #    mountPath:

    ## A list of additional existing configMaps that will be mounted into the container
    extraSentinelConfigs: []
        ## Name of the existing K8s configMap
    #  - name:
        ## Mount default mode (0440 if parameter is omitted)
    #    defaultMode: 0440
        ## Mount path where the configMap should be mounted into the container (f.e. /mysecretfolder)
    #    mountPath:

    ## Use Kubernetes Deployment instead of StatefulSet when in Non-HA mode
    useDeploymentWhenNonHA: true

    ## High availability mode (with master-slave replication and sentinel)
    haMode:
      ## Enable high availibility deployment mode
      enabled: false
      ## Use DNS names instead of Pod IPs to build the cluster
      useDnsNames: false
      ## Mandatory redis HA-master group name (default "redisha")
      masterGroupName: "redisha"
      ## Number of replicas (minimum should be 3)
      replicas: 3
      ## Quorum of sentinels that need to agree that a master node is not available
      quorum: 2
      ## Number of milliseconds after the master should be declared as unavailable
      downAfterMilliseconds: 30000
      ## Timeout for a failover
      failoverTimeout: 180000
      ## Number of parallel reconfigurations
      parallelSyncs: 1
      ## Timeout in seconds to detect if Redis master is alive
      masterAliveTestTimeout: 2
      ## Assumed wait time in seconds until failover should be finished and before failover will be forced (should be greater than value of downAfterMilliseconds)
      failoverWait: 35
      ## Wait time in seconds before restart will be forced after a DNS failure during initialization
      dnsFailureWait: 15
      ## Keep old init logs in /data/init.log after a successful initialization (use only for debugging)
      keepOldLogs: false

    ## Storage parameters
    storage:
      ##  Set persistentVolumenClaimName to reference an existing PVC
      persistentVolumeClaimName:

      ## Internal volume name and prefix of a created PVC
      volumeName: "redis-data"

      ## Alternative set requestedSize to define a size for a dynmaically created PVC
      requestedSize:

      ## the storage class name
      className:

      ## Default access mode (ReadWriteOnce)
      accessModes:
        - ReadWriteOnce

      ## Keep a created Persistent volume claim when uninstalling the helm chart (only for non-HA mode with option useDeploymentWhenNonHA: true)
      keepPvc: false

      ## Additional storage annotations
      annotations: {}

      ## Additional storage labels
      labels: {}

    ## Mount existing extra PVC
    extraStorage: {}
        ## Internal volume name
    #  - name:
        ## Container mount path
    #    mountPath:
        ## Name of existing PVC
    #    pvcName:

    ## Network policies
    networkPolicy: {}
      ## Ingress and Egress policies
      # ingress: {}
      # egress: {}
